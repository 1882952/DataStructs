package 二零年2月;
/*
* 实现 int sqrt(int x) 函数。
* 计算并返回 x 的平方根，其中 x 是非负整数。
由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去

思路;利用牛顿迭代法，随便猜一个近似值x，然后不断令x等于x和a/x的平均数，迭代六七次后x的
值已经相当准确。
    例如，我想求根号 2 等于多少。假如我猜测的结果为 4，虽然错的离谱，但你可以看到使用牛顿迭代法
    后这个值很快就趋近于根号 2 了：
( 4 + 2/ 4 ) / 2 = 2.25
( 2.25 + 2/ 2.25 ) / 2 = 1.56944..
( 1.56944..+ 2/1.56944..) / 2 = 1.42189..
( 1.42189..+ 2/1.42189..) / 2 = 1.41423..

这种算法的原理很简单，我们仅仅是不断用 (x,f(x)) 的切线来逼近方程 x^2-a=0的根。
* */
public class L_69 {
    int s;
    public int mySqrt(int x) {
        s=x;
        if (x==0){
            return 0;
        }else {
            return ((int)(sqrts(x)));
        }
    }

    public double sqrts(double x){
        double res=(x+s/x)/2;
        if(res==x){
            return x;
        }else {
            return sqrts(res);  //不断的尝试递归（即迭代）
        }
    }
}
